package cmd

import (
	"github.com/kaifei-bianjie/mock/conf"
	"github.com/spf13/pflag"
	"os"
)

const (
	FlagNodeUrl = "node"
	FlagChainId = "chain-id"
	FlagConfDir = "home"

	FlagFaucetSeed      = "seed"
	FlagFaucetName      = "faucet-name"
	FlagSubFaucetAccNum = "sub-faucet-num"
	FlagFaucetAddress   = "faucet-address"

	FlagBlockInterval = "block-interval"
	FlagReceiverAddr  = "receiver"
	FlagNumSignedTx   = "num"
	FlagResOutput     = "output"

	FlagEveryNumSignedTx = "trans-num"
	FlagTps              = "tps"
	FlagCommit           = "commit"
	FlagDuration         = "duration"
	FlagBotsNum          = "bots"
	FlagTestAccountNum   = "acc-num"
	FlagAccountIndex     = "account-index"
)

var (
	rootFlagSet              = pflag.NewFlagSet("", pflag.ContinueOnError)
	faucetFlagSet            = pflag.NewFlagSet("", pflag.ContinueOnError)
	txFlagSet                = pflag.NewFlagSet("", pflag.ContinueOnError)
	singleTxFlagSet          = pflag.NewFlagSet("", pflag.ContinueOnError)
	multiTxFlagSet           = pflag.NewFlagSet("", pflag.ContinueOnError)
	faucetAverFlagSet        = pflag.NewFlagSet("", pflag.ContinueOnError)
	multiTxDirectlyFlagSet   = pflag.NewFlagSet("", pflag.ContinueOnError)
	singleSignAndSaveFlagSet = pflag.NewFlagSet("", pflag.ContinueOnError)
	broadcastFlagSet         = pflag.NewFlagSet("", pflag.ContinueOnError)
)

func init() {
	rootFlagSet.StringVar(&conf.ChainId, FlagChainId, "", "chain id")
	rootFlagSet.StringVar(&conf.NodeUrl, FlagNodeUrl, "http://localhost:1317", "lcd url")
	rootFlagSet.String(FlagConfDir, conf.DefaultHome, "directory of config file")

	faucetFlagSet.StringVarP(&conf.FaucetName, FlagFaucetName, "", "", "faucet name")
	faucetFlagSet.StringVarP(&conf.FaucetSeed, FlagFaucetSeed, "", "", "seed")
	faucetFlagSet.String(FlagConfDir, conf.DefaultHome, "directory for save config data")
	faucetFlagSet.Int(FlagSubFaucetAccNum, 10, "num of sub faucet want to create, shouldn't greater than 10")

	txFlagSet.Int(FlagNumSignedTx, 0, "num of signed tx which need to generated")
	txFlagSet.StringVar(&conf.DefaultReceiverAddr, FlagReceiverAddr, "", "receiver address")
	txFlagSet.IntVar(&conf.BlockInterval, FlagBlockInterval, 5, "block interval")
	txFlagSet.String(FlagResOutput, os.ExpandEnv("$HOME")+"/output", "output directory of result file which content signed tx data")
	txFlagSet.String(FlagConfDir, conf.DefaultHome, "directory of config file")

	singleTxFlagSet.StringVarP(&conf.FaucetName, FlagFaucetName, "", "", "faucet name")
	singleTxFlagSet.Int(FlagNumSignedTx, 0, "num of signed tx which need to generated")
	singleTxFlagSet.String(FlagResOutput, os.ExpandEnv("$HOME")+"/output", "output directory of result file which content signed tx data")
	singleTxFlagSet.String(FlagConfDir, conf.DefaultHome, "directory of config file")
	singleTxFlagSet.String(FlagFaucetAddress, "", "faucet address")

	multiTxFlagSet.StringVarP(&conf.FaucetName, FlagFaucetName, "", "", "faucet name")
	multiTxFlagSet.Int(FlagEveryNumSignedTx, 0, "num of signed tx which will be generated by every test account")
	multiTxFlagSet.Int(FlagTestAccountNum, 0, "num of test account which will be generated")
	multiTxFlagSet.String(FlagResOutput, os.ExpandEnv("$HOME")+"/output", "output directory of result file which content signed tx data")
	multiTxFlagSet.String(FlagConfDir, conf.DefaultHome, "directory of config file")
	multiTxFlagSet.String(FlagFaucetAddress, "", "faucet address")

	faucetAverFlagSet.StringVarP(&conf.FaucetName, FlagFaucetName, "", "", "faucet name")
	faucetAverFlagSet.String(FlagConfDir, conf.DefaultHome, "directory for save config data")
	faucetAverFlagSet.Int(FlagSubFaucetAccNum, 10, "num of sub faucet want to create, shouldn't greater than 10")

	multiTxDirectlyFlagSet.StringVarP(&conf.FaucetName, FlagFaucetName, "", "", "faucet name")
	multiTxDirectlyFlagSet.Int(FlagEveryNumSignedTx, 0, "num of signed tx which will be generated by every test account")
	multiTxDirectlyFlagSet.Int(FlagTestAccountNum, 0, "num of test account which will be generated")
	multiTxDirectlyFlagSet.String(FlagResOutput, os.ExpandEnv("$HOME")+"/output", "output directory of result file which content signed tx data")
	multiTxDirectlyFlagSet.String(FlagConfDir, conf.DefaultHome, "directory of config file")
	multiTxDirectlyFlagSet.String(FlagFaucetAddress, "", "faucet address")

	singleSignAndSaveFlagSet.Int(FlagBotsNum, 0, "num of test account which will be generated")
	singleSignAndSaveFlagSet.Int(FlagDuration, 0, "time duration during the pressure test")
	singleSignAndSaveFlagSet.String(FlagResOutput, os.ExpandEnv("$HOME")+"/output", "output directory of result file which content signed tx data")
	singleSignAndSaveFlagSet.String(FlagConfDir, conf.DefaultHome, "directory of config file")
	singleSignAndSaveFlagSet.Int(FlagAccountIndex, 0, "test account index in distribute systems")
	singleSignAndSaveFlagSet.Int(FlagTps, 0, "max tps per second")

	broadcastFlagSet.Int(FlagBotsNum, 0, "num of test account which will be generated")
	broadcastFlagSet.Int(FlagTps, 0, "max tps per second")
	broadcastFlagSet.Int(FlagCommit, 0, "block commit time in config")
	broadcastFlagSet.String(FlagResOutput, os.ExpandEnv("$HOME")+"/output", "output directory of result file which content signed tx data")

}
